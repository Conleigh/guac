#!/usr/bin/env python2

import argparse
import random

# Parse arguments.  You should not need to modify this.
parser = argparse.ArgumentParser()
parser.add_argument("grammar", help="path to grammar file")
parser.add_argument("count", type=int, help="number of sentences to generate", nargs='?', default=1)
parser.add_argument("-t", "--tree", action='store_true', help="pretty-print tree form instead of printing sentence")
parser.add_argument("--seed", type=int, default=0, help="RNG seed")
args = parser.parse_args()

# Create a random generator.
rng = random.Random(args.seed)

# Here's how to access the args.  (You won't print them in your actual program.)
# print 'path to grammar file:', args.grammar
# print 'count:', args.count
# print 'print tree?', args.tree
# print 'RNG seed:', args.seed

# Print out the grammar.  You'll replace the loop body.
# Option: change dict to store [weight] instances of each entry.
# Will need more memory, but could mean faster performance. 
grammar_dict = {} # start symbol: [(weight, [following tokens])]

with open(args.grammar, 'r') as grammar_file:
  for line in grammar_file:
    line = line.strip()
    if not line: continue
    if line.startswith('#'): continue
    items = line.split()
    weight = int(items[0])
    start = items[1]
    tokens = []
    for token in items[2:]:
        if token == '#': break
        tokens.append(token)
    if start not in grammar_dict:
        grammar_dict[start] = []
    grammar_dict[start].append((weight, tokens))
# print(grammar_dict)

def expand(start):
	if start not in grammar_dict: return start + " "
	sentence = ""
	# Expand choices, with one entry for each weight in the grammar file
	choices = []
	for entry in grammar_dict[start]:
		for i in range(entry[0]):
			choices.append(entry[1])
	tokens = rng.choice(choices)
	# Choose which entry to use
	for token in tokens:
		sentence = sentence + expand(token)
	return sentence

for i in range(args.count):
	print(expand("START"))